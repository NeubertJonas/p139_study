---
title: "Presentating Data with Quarto"
subtitle: "A Proof of Concept Using Relationship Questionnaires"
author: "Jonas Neubert"
date: "`r Sys.Date()`"
prefer-html: true
format:
    # docx: default
    # pdf:
    #   execute:
    #     echo: false
    #     warning: false
    html: 
      self-contained: true
      echo: false
reference-location: margin
citation-location: margin
bibliography: skeleton.bib
---

# Introduction

This is a demonstration how Quarto[^1] and R can be used to produce a document which contains data from the hyperscanning study. The goal is to write my master thesis in this format, because RStudio can replace Excel (data cleaning/preparation), SPSS (statistical analysis), EndNote (citation management), and Word (writing text) by offering all those steps within one integrated environment.

[^1]: Quarto is an open-source scientific and technical publishing system, which represents the evolution of R Markdown. It offers integration of R, Python, Julia, and Observable JS. To learn more, you can read more about [Quarto](https://www.quarto.org) or check out this [PhD thesis from Leiden University](https://bengoudsmit.github.io/Thesis/) written in R Markdown.

## Layout

The basis for this document was a template inspired by the Tufte handout style [@xie2018] available on [GitHub](https://github.com/quarto-dev/quarto-gallery/blob/main/page-layout/tufte.qmd). The Tufte handout style is a style that Edward Tufte uses in his books and handouts. Tufte's style is known for its extensive use of sidenotes, tight integration of graphics with text, and well-set typography. Quarto supports most of the layout techniques that are used in the Tufte handout style for both HTML and LaTeX/PDF output.

# Raw Data from Qualtrics

```{r}
#| label: load-packages
#| include: false

source("../relationship_metrics.R")

files = list.files("../_data/", pattern = "[[:alnum:]]+.csv$", 
               full.names = TRUE, recursive = TRUE)
sources = c(
  baseline = files[grep("TrainingDay_Baseline", files, fixed = TRUE)],
  follow_up = files[grep("Follow+up", files, fixed = TRUE)],
  home = files[grep("At+home+questionnaire", files, fixed = TRUE)]
  )

n = sort(unique(get_progress()$ID))

combination <- get_combination()
```

First, the raw data needs to be downloaded as csv files for three Qualtrics questionnaires: TrainingDay_Baseline, Follow-Up, and At Home Questionnaire. When downloading, make sure to select *numeric choice* rather than *choice text*. There is no need to rename the files, but they need to be placed in the *data* folder. At the time of writing (partial) data for the following participants is available: `r n`.

## Data Collection Progress

As the data collection is still ongoing, the raw data contains both complete and partial data sets. Relevant data for my master thesis are recorded at baseline, the follow-up testing day at the lab two days after dosing (FU_1 and FU_3) and the at-home follow-up questionnaire (FU_2 and FU_4) four days after dosing. Let's have a closer look at that:

```{r}
#| label: collection-progress
#| tbl-cap-location: margin
#| tbl-cap: "**Data availability per participant.**"
library(kableExtra)
kable(get_progress())
```

::: callout-note
Test data in Qualtrics are automatically skipped during data import, which includes subject IDs such as `999`. This is achieved by only selecting IDs containing `139` via `filter(grepl("139", ID))`.
:::

## Overview

| Name                                                           | Baseline | SA \@ lab | SA \@ home |
|------------------------------|:------------:|:------------:|:------------:|
| [Couple Satisfaction Index (CSI-4)](#sec-csi)                  |    ✓     |     ✓     |     ✓      |
| [Satisfaction with Life Scale (SWLS)](#sec-swls)               |    ✓     |     ✓     |     ✓      |
| [Perceived Partner Responsiveness Scale (PPRS)](#sec-pprs)     |    ✓     |           |     ✓      |
| [Interpersonal Reactivity Index for Couples (IRI-C)](#sec-iri) |    ✓     |           |     ✓      |
| [Experiences in Close Relationships Scale (ECR-S)](#sec-ecr)   |    ✓     |           |     ✓      |
| [Global Measure of Sexual Satisfaction (GMSEX)](#sec-gmsex)    |    ✓     |     ✓     |     ✓      |
| [Female Sexual Function Index (FSFI)](#sec-fsfi)               |    ✓     |           |     ✓      |
| [International Index of Erectile Function (IIEF)](#sec-iief)   |    ✓     |           |     ✓      |

: Questionnaires and when they are recorded.

::: {.callout-note title="Missing Questionnaires?"}
Please note that the above table does not contain all questionnaires recorded during those days, but simple those directly related to relationships and sexuality.
:::

# Couple Satisfaction Index (CSI-4) {#sec-csi}

Definition

:   A 4-item, psychometrically optimized, self-report scale assessing relationship satisfaction.

The function `csi()` is applied to the raw data from Qualtrics to calculate the CSI-4:

```{r}
#| label: csi-example
#| eval: false
#| echo: true
csi <- \(dat) {
  range <- get_range(dat, "CSI_4")    # <1>
  x <- dat |> select(all_of(range))   # <2>
  dat <- dat |> mutate(CSI_4 = rowSums(x) - 4, .after = max(range)) # <3>
}
```

1.  Look up where the CSI is located
2.  Save just those four items in a new tibble
3.  Calculate the sum and subtract 4 for the final score

```{r}
#| label: csi
ggplot(combination[], aes(x = ID, y = CSI_4, fill = Day)) +
  geom_col(position = "dodge2") +
  geom_hline(aes(yintercept = 13.5), colour = "gray4", show.legend = FALSE) +
  ggtitle("CSI-4") +
  ylab(NULL) + labs( caption = "Values below the horizontal line (13.5) suggest relationship dissatisfaction.")

```

# Perceived Partner Responsiveness Scale (PPRS-12) {#sec-pprs}

```{r}
#| label: pprs
pprs <- combination |>
  select(ID, Day, PPRS_12_U, PPRS_12_V) |>
  pivot_longer(c("PPRS_12_V", "PPRS_12_U"), names_to = "PPRS_12") |>
  filter(!is.na(value))

ggplot(pprs, aes(x = Day, y = value, fill = PPRS_12)) +
  geom_col() +
  facet_grid(. ~ ID, scales = "free", space = "free_x") +
  ggtitle("PPRS-12") +
  scale_fill_discrete(name = "Subscales", labels = c("Understanding", "Validation")) +
  ylab(NULL)

```

# Satisfaction with Life Scale (SWLS) {#sec-swls}

```{r}
#| label: swls

ggplot(combination, aes(x = ID, y = SWLS, fill = Day)) +
  geom_col(position = "dodge2") +
  geom_hline(aes(yintercept = 20), colour = "gray4", show.legend = FALSE) +
  ggtitle("SWLS") +
  ylab(NULL) + labs( caption = "Values below the horizontal line (20) suggest dissatisfaction.")

```

# Interpersonal Reactivity Index for Couples (IRI-C) {#sec-iri}

```{r}
#| label: iri
iri <- combination |>
  select(ID, Day, IRI_C_PT, IRI_C_EC) |>
  pivot_longer(c("IRI_C_EC", "IRI_C_PT"), names_to = "IRI") |>
  filter(!is.na(value))

ggplot(iri, aes(x = Day, y = value, fill = IRI)) +
  geom_col() +
  facet_grid(. ~ ID, scales = "free", space = "free_x") +
  ggtitle("IRI-C") +
  scale_fill_discrete(name = "Subscales", labels = c("Empathic Concern", "Perspective Taking")) +
  ylab(NULL)

```

# Experiences in Close Relationships Scale (ECR-S) {#sec-ecr}

```{r}
#| label: ecr
ecr <- combination |>
  select(ID, Day, ECR_S_AV, ECR_S_AN) |>
  pivot_longer(c("ECR_S_AV", "ECR_S_AN"), names_to = "ECR") |>
  filter(!is.na(value))

ggplot(ecr, aes(x = Day, y = value, fill = ECR)) +
  geom_col() +
  facet_grid(. ~ ID, scales = "free", space = "free_x") +
  ggtitle("ECR-S") +
  scale_fill_discrete(name = "Subscales", labels = c("Attachment Anxiety", "Attachment Avoidance")) +
  ylab(NULL)

```

# Global Measure of Sexual Satisfaction (GMSEX) {#sec-gmsex}

```{r}
#| label: gmsex
ggplot(combination, aes(x = ID, y = GMSEX, fill = Day)) +
  geom_col(position = "dodge2") +
  ggtitle("GMSEX") +
  ylab(NULL)

```

# Female Sexual Function Index (FSFI) {#sec-fsfi}

```{r}
#| label: fsfi
library(plotly)
fsfi <- combination |>
  select(ID, Day, starts_with("FSFI")) |>
  pivot_longer(starts_with("FSFI"), names_to = "Subscale") |>
  filter(!is.na(value)) |>
  filter(!(Subscale == "FSFI")) |>
  mutate(across(3, \(.) case_when(
    . == "FSFI_A" ~ "Arousal",
    . == "FSFI_D" ~ "Desire",
    . == "FSFI_L" ~ "Lubrication",
    . == "FSFI_O" ~ "Orgasm",
    . == "FSFI_S" ~ "Satisfaction",
    . == "FSFI_P" ~ "Pain",
    .default = .
  )))

p <- ggplot(fsfi, aes(x = Day, y = value, fill = Subscale)) +
  geom_col() +
  facet_grid(. ~ ID, scales = "free", space = "free_x") +
  scale_fill_brewer(palette = "Pastel1", name = "Subscales") +
  ylab(NULL) +
  ggtitle("FSFI")
#  scale_fill_viridis_d(option = "E")

ggplotly(p, tooltip = c("Subscale", "value"))

```

::: callout-note
This is an interactive plot created via Plotly. You can hover your mouse over it to see individual values for subscales.
:::

# International Index of Erectile Function (IIEF) {#sec-iief}

```{r}
#| label: iief

iief <- combination |>
  select(ID, Day, starts_with("IIEF")) |>
  pivot_longer(starts_with("IIEF"), names_to = "Subscale") |>
  filter(!is.na(value)) |>
  filter(!(Subscale == "IIEF")) |>
  mutate(across(3, \(.) case_when(
    . == "IIEF_E" ~ "Erectile Function",
    . == "IIEF_OF" ~ "Orgasmic Function",
    . == "IIEF_S" ~ "Sexual Desire",
    . == "IIEF_I" ~ "Intercourse Satisfaction",
    . == "IIEF_OS" ~ "Overall Satisfaction",
    .default = .
  )))

p <- ggplot(iief, aes(x = Day, y = value, fill = Subscale)) +
  geom_col() +
  facet_grid(. ~ ID, scales = "free", space = "free_x") +
  scale_fill_brewer(palette = "Pastel2", name = "Subscales")
#  scale_fill_viridis_d(option = "E")

ggplotly(p, tooltip = c("Subscale", "value"))
```